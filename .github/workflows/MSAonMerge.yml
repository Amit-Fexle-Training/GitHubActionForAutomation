name: Manual Step Automation 2.0

on:
  pull_request:
    types:
      - closed
    branches:
      - main

jobs:
  manualStepAutomation:
    runs-on: ubuntu-latest

    steps:
      - name: Check if PR was merged
        if: github.event.pull_request.merged == true
        run: |
          PR_TITLE="${{ github.event.pull_request.title }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"
          GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"

          # Fetch the pull request's description
          PR_DESCRIPTION=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/$PR_NUMBER" \
            | jq -r .body)

          echo "PR Title: $PR_TITLE"
          echo "Merge Message: $PR_DESCRIPTION"
          
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Get Merge Message
        id: merge_commit
        run: |
          merge_commit_message=${{ github.event.pull_request.merged_commit.message }}"
          echo "merge_commit_message=$merge_commit_message" >> $GITHUB_ENV
          echo "Merge Message '$merge_commit_message' "

      - name: Check for "RunScript" in Merge Commit Message
        id: RunScript_check
        run: |
          specific_word="RunScript"
          merge_commit_message="${{ env.merge_commit_message }}"
          echo "Merge Commit Message '$merge_commit_message' "
          
          if [[ $merge_commit_message == *"$specific_word"* ]]; then
            echo "Found the specific word '$specific_word' in the merge commit message."
            var="true"
            echo "RunScript_found=$var" >> $GITHUB_ENV
            
            # Split the merge commit message into words
            IFS=' ' read -ra commit_message_words <<< "$merge_commit_message"
            
            # Store the second and third words in environment variables if they exist
            if [[ ${#commit_message_words[@]} -ge 3 ]]; then
              second_word="${commit_message_words[1]}"
              third_word="${commit_message_words[2]}"
              echo "second_word=$second_word" >> $GITHUB_ENV
              echo "third_word=$third_word" >> $GITHUB_ENV
            fi
          else
            echo "The specific word '$specific_word' was not found in the merge commit message."
            var="false"
            echo "RunScript_found=$var" >> $GITHUB_ENV
          fi

      - name: Set up Python
        if: steps.RunScript_check.outputs.RunScript_found == 'true'
        uses: actions/setup-python@v3
        with:
          python-version: 3.11

      - name: Cache Python dependencies
        if: steps.RunScript_check.outputs.RunScript_found == 'true'
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-

      - name: Install Python dependencies
        if: steps.RunScript_check.outputs.RunScript_found == 'true'
        run: |
          python -m pip install --upgrade pip
          pip install -r ./requirements.txt

      - name: Run Python script
        if: steps.RunScript_check.outputs.RunScript_found == 'true'
        run: |
          python mainGA.py "${{ steps.RunScript_check.outputs.second_word }}" "${{ steps.RunScript_check.outputs.third_word }}" "Y"

      - name: Configure Git with PAT
        if: steps.RunScript_check.outputs.RunScript_found == 'true'
        run: |
          git config --global user.email "amit.kumar@fexle.com"
          git config --global user.name "Amit-Fexle-Training"
        env:
          PAT: ${{ secrets.REPO_PAT_SECRET }}
    
      - name: Commit and push changes
        if: steps.RunScript_check.outputs.RunScript_found == 'true'
        run: |
          releaseName="${{ steps.RunScript_check.outputs.second_word }}_results/"
          git add "$releaseName"  # Useing the releaseName as part of the path
          git commit -m "Add Manual Step Automation Script generated folder for $releaseName"
          git push
